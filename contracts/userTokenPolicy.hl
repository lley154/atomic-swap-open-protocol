minting userTokenPolicy

enum Redeemer { 
    Mint {
        tnBA: ByteArray
    }
    Burn 
}

struct TokenDatum {
    userPkhBA: ByteArray
}

// Contract parameters 
const VERSION: ByteArray = #
const TOKEN_NAME: ByteArray = #
const OWNER_PKH: ByteArray = #
const ownerPKH: PubKeyHash = PubKeyHash::new(OWNER_PKH)
const MIN_ADA: Int = 2_500_000
const minAdaVal: Value = Value::lovelace(MIN_ADA)

func main(redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    
    tx : Tx = ctx.tx;
    txOutputs : []TxOutput = tx.outputs;
    print("VERSION: " + VERSION.show());

    redeemer.switch {
        red: Mint => {
           
            userTokenAssetclass: AssetClass = AssetClass::new(
                ctx.get_current_minting_policy_hash(), 
                red.tnBA
            );
            // Define user and reference token values
            userTokenVal : Value = Value::new(userTokenAssetclass, 1);
            refTokenVal : Value = Value::new(userTokenAssetclass, 1);
            tnLength : Int = TOKEN_NAME.length + 1;
            timestampBA: ByteArray = red.tnBA.slice(tnLength,red.tnBA.length);
            timestamp: Time = Time::new(Int::parse(timestampBA.decode_utf8()));

            // Check that timestamp is within valid tx
            //(!tx.time_range.is_before(timestamp)).trace("UTP1: ") &&
            //(!tx.time_range.is_after(timestamp)).trace("UTP2: ") &&
            tx.time_range.contains(timestamp) &&
            tx.is_signed_by(ownerPKH).trace("UTP3: ") &&
            (tx.minted == (userTokenVal + refTokenVal)).trace("UTP4: ") &&
            (if (txOutputs.length >= 2) {
                txOutputVHash: TxOutput = txOutputs.head;
                txOutputVHash.datum.switch {
                    refTokenDatum: Inline => { 
                        refTokenData:TokenDatum = TokenDatum::from_data(refTokenDatum.data);
                        userPkh: PubKeyHash = PubKeyHash::new(refTokenData.userPkhBA);
                        tx.is_signed_by(userPkh).trace("UTP5: ") 
                    },
                    else => false.trace("UTP6:") // no reference inline datum
                }
            } else {
                false.trace("UTP7:") // must be at least 2 outputs
            })
        },
        Burn => { 
            false.trace("UTP8:") // don't allow burning of user token
        }
    }
}